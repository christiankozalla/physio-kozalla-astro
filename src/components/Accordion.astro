---
// Accordion.astro
interface Props {
    items: {
        title: string;
        content: string;
    }[];
}

const { items } = Astro.props;

const groupIntoSets = <T extends unknown[]>(array: T, groupSize: number) => {
    return array.reduce((groups: T[], item, index) => {
        if (index % groupSize === 0) {
            groups.push([] as unknown as T);
        }
        groups[groups.length - 1].push(item);
        return groups;
    }, []);
};

const groupedItems = groupIntoSets(items, items.length / 2);
---

<div class="accordion">
    {
        groupedItems.map((items) => (
            <div class="accordion-group">
                {items.map((item, index) => (
                    <div class="accordion-item">
                        <button
                            class="accordion-header"
                            aria-expanded="false"
                            aria-controls={`accordion-content-${index}`}
                        >
                            {item.title}
                            <svg
                                class="accordion-icon"
                                width="20"
                                height="20"
                                viewBox="0 0 20 20"
                                aria-hidden="true"
                            >
                                <path
                                    d="M5 7.5L10 12.5L15 7.5"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    fill="none"
                                />
                            </svg>
                        </button>
                        <div
                            class="accordion-content"
                            id={`accordion-content-${index}`}
                            role="region"
                            aria-labelledby={`accordion-header-${index}`}
                        >
                            <div class="accordion-body">
                                {item.content.split("\n\n").map((p) => (
                                    <p>{p}</p>
                                ))}
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        ))
    }
</div>

<style>
    .accordion {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 8px;
        width: 100%;
        margin: 0 auto;
    }

    .accordion-group {
        display: flex;
        flex-direction: column;
    }

    .accordion-item {
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 0.5rem;
    }

    .accordion-item:last-child {
        flex-grow: 1;
    }

    .accordion-header {
        width: 100%;
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: none;
        border: none;
        cursor: pointer;
        text-align: left;
        font-size: large;
        font-family: inherit;
        color: inherit;
    }

    .accordion-header:hover {
        background-color: #f5f5f5;
    }

    .accordion-icon {
        transition: transform 0.3s ease;
    }

    .accordion-header[aria-expanded="true"] .accordion-icon {
        transform: rotate(180deg);
    }

    .accordion-content {
        visibility: hidden;
        overflow: hidden;
        height: 0;
        opacity: 0;
        transition:
            height 0.3s ease-out,
            opacity 0.3s ease-out;
    }

    .accordion-content.expanded {
        visibility: visible;
        height: var(--content-height);
        opacity: 1;
    }

    .accordion-body {
        padding: 1rem 1rem 1.6rem 1rem;
        border-top: 1px solid #ddd;
        font-size: large;
    }

    @media screen and (max-width: 1024px) {
        .accordion {
            grid-template-columns: 1fr;
        }
    }
</style>

<script>
    class Accordion {
        headers;

        constructor() {
            this.headers = document.querySelectorAll(".accordion-header");
            this.init();
        }

        init() {
            this.headers.forEach((header) => {
                // Set initial height for each content panel
                const content = header.nextElementSibling as HTMLElement | null;
                const body = content?.querySelector(".accordion-body") as
                    | HTMLElement
                    | null
                    | undefined;
                if (body && content)
                    content.style.setProperty(
                        "--content-height",
                        `${body.offsetHeight + 2}px`,
                    );

                header.addEventListener("click", () =>
                    this.toggleAccordion(header as HTMLElement),
                );
            });
        }

        toggleAccordion(header: HTMLElement) {
            const isExpanded = header.getAttribute("aria-expanded") === "true";
            const content = header.nextElementSibling;

            // Toggle current accordion
            header.setAttribute("aria-expanded", String(!isExpanded));
            content?.classList.toggle("expanded");
        }
    }

    // Initialize accordion when the DOM is loaded
    document.addEventListener("DOMContentLoaded", () => {
        new Accordion();
    });
</script>
